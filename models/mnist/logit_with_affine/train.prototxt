name: "logistic_regression_with_affine"
layer {
  name: 'input-data'
  type: 'Python'
  top: 'data'
  top: 'labels'
  python_param {
    module: 'cls_data_layer.layer'
    layer: 'ClsDataLayer'
    param_str: "'num_classes': 2"
  }
}


layer{
  name: "warp_angle_raw"
  type: "InnerProduct"
  bottom: "data"
  top: "warp_angle_raw"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}

layer{
  name: "warp_angle"
  type: "TanH"
  bottom: "warp_angle_raw"
  top: "warp_angle"
}

layer{
  name: 'warp_data'
  type: 'Python'
  top: 'warp_data'
  bottom: 'warp_angle'
  bottom: 'data'
  python_param {
    module: 'warp_affine_layer.layer'
    layer: 'WarpAffineLayer'
  }
}

layer {
  name: "cls_score"
  type: "InnerProduct"
  bottom: "warp_data"
  top: "cls_score"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 2
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "loss_cls"
  type: "SoftmaxWithLoss"
  bottom: "cls_score"
  bottom: "labels"
  propagate_down: 1
  propagate_down: 0
  top: "loss_cls"
  loss_weight: 1
}
