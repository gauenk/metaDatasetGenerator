name: "VAE"
layer {
  name: 'input-data'
  type: 'Python'
  top: 'data'
  top: 'labels'
  # top: 'im_info'
  python_param {
    module: 'cls_data_layer.layer'
    layer: 'ClsDataLayer'
    param_str: "'num_classes': 2\n'generation': True"
  }
  include {
    phase: TRAIN
  }
}
layer {
  name: "flatdata"
  type: "Flatten"
  bottom: "labels"
  top: "flatdata"
  flatten_param {
    end_axis: 3
  }
  include {
    phase: TRAIN
  }
}
layer {
  name: "norm_flatdata"
  bottom: "flatdata"
  top: "norm_flatdata"
  type: "Power"
  power_param {
    power: 1
    scale: 0.003921569
    shift: 0
  }
  include {
    phase: TRAIN
  }
}
layer {
  name: "conv1_1"
  type: "Convolution"
  bottom: "data"
  top: "conv1_1"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
  }
  include {
    phase: TRAIN
  }

}
layer {
  name: "relu1_1"
  type: "ReLU"
  bottom: "conv1_1"
  top: "conv1_1"
  include {
    phase: TRAIN
  }

}
layer {
  name: "conv1_2"
  type: "Convolution"
  bottom: "conv1_1"
  top: "conv1_2"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
  }
  include {
    phase: TRAIN
  }

}
layer {
  name: "relu1_2"
  type: "ReLU"
  bottom: "conv1_2"
  top: "conv1_2"
  include {
    phase: TRAIN
  }

}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1_2"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
  include {
    phase: TRAIN
  }

}
layer {
  name: "conv2_1"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2_1"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
  }
  include {
    phase: TRAIN
  }

}

layer {
  name: "relu2_1"
  type: "ReLU"
  bottom: "conv2_1"
  top: "conv2_1"
  include {
    phase: TRAIN
  }

}
layer {
  name: "conv2_2"
  type: "Convolution"
  bottom: "conv2_1"
  top: "conv2_2"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
  }
  include {
    phase: TRAIN
  }

}
layer {
  name: "relu2_2"
  type: "ReLU"
  bottom: "conv2_2"
  top: "conv2_2"
  include {
    phase: TRAIN
  }

}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2_2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
  include {
    phase: TRAIN
  }

}
layer {
  name: "conv3_1"
  type: "Convolution"
  bottom: "pool2"
  top: "conv3_1"
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
  include {
    phase: TRAIN
  }
}
layer {
  name: "relu3_1"
  type: "ReLU"
  bottom: "conv3_1"
  top: "conv3_1"
  include {
    phase: TRAIN
  }
}
layer {
  name: "conv3_2"
  type: "Convolution"
  bottom: "conv3_1"
  top: "conv3_2"
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
  include {
    phase: TRAIN
  }
}
layer {
  name: "relu3_2"
  type: "ReLU"
  bottom: "conv3_2"
  top: "conv3_2"
  include {
    phase: TRAIN
  }
}
layer {
  name: "conv3_3"
  type: "Convolution"
  bottom: "conv3_2"
  top: "conv3_3"
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
  include {
    phase: TRAIN
  }
}
layer {
  name: "relu3_3"
  type: "ReLU"
  bottom: "conv3_3"
  top: "conv3_3"
  include {
    phase: TRAIN
  }
}
layer {
  name: "pool3"
  type: "Pooling"
  bottom: "conv3_3"
  top: "pool3"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
  include {
    phase: TRAIN
  }
}
layer {
  name: "conv4_1"
  type: "Convolution"
  bottom: "pool3"
  top: "conv4_1"
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
  include {
    phase: TRAIN
  }
}
layer {
  name: "relu4_1"
  type: "ReLU"
  bottom: "conv4_1"
  top: "conv4_1"
  include {
    phase: TRAIN
  }
}
layer {
  name: "conv4_2"
  type: "Convolution"
  bottom: "conv4_1"
  top: "conv4_2"
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
  include {
    phase: TRAIN
  }
}
layer {
  name: "relu4_2"
  type: "ReLU"
  bottom: "conv4_2"
  top: "conv4_2"
  include {
    phase: TRAIN
  }
}
layer {
  name: "conv4_3"
  type: "Convolution"
  bottom: "conv4_2"
  top: "conv4_3"
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
  include {
    phase: TRAIN
  }
}
layer {
  name: "relu4_3"
  type: "ReLU"
  bottom: "conv4_3"
  top: "conv4_3"
  include {
    phase: TRAIN
  }
}
layer {
  name: "pool4"
  type: "Pooling"
  bottom: "conv4_3"
  top: "pool4"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
  include {
    phase: TRAIN
  }
}
layer {
  name: "conv5_1"
  type: "Convolution"
  bottom: "pool4"
  top: "conv5_1"
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
  include {
    phase: TRAIN
  }
}
layer {
  name: "relu5_1"
  type: "ReLU"
  bottom: "conv5_1"
  top: "conv5_1"
  include {
    phase: TRAIN
  }
}
layer {
  name: "conv5_2"
  type: "Convolution"
  bottom: "conv5_1"
  top: "conv5_2"
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
  include {
    phase: TRAIN
  }
}
layer {
  name: "relu5_2"
  type: "ReLU"
  bottom: "conv5_2"
  top: "conv5_2"
  include {
    phase: TRAIN
  }
}
layer {
  name: "conv5_3"
  type: "Convolution"
  bottom: "conv5_2"
  top: "conv5_3"
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
  include {
    phase: TRAIN
  }
}
layer {
  name: "relu5_3"
  type: "ReLU"
  bottom: "conv5_3"
  top: "conv5_3"
  include {
    phase: TRAIN
  }
}
layer {
  name: "pool5"
  type: "Pooling"
  bottom: "conv5_3"
  top: "pool5"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
  include {
    phase: TRAIN
  }
}
# end encoder, begin VAE z definition

layer {
  name: "mu_"
  type: "InnerProduct"
  bottom: "pool5"
  top: "mu"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 1
    decay_mult: 0
  }
  inner_product_param {
    num_output: 100 # num z's
    weight_filler {
      type: "gaussian"
	    std: 0.1
	  }
    bias_filler {
      type: "constant"
	    value: 0
	  }
  }
  include {
    phase: TRAIN
  }
}
# Predict log sd because sd needs to be
# positive, and the exp ensures that it is.
layer {
  name: "logsd_"
  type: "InnerProduct"
  bottom: "pool5"
  top: "logsd"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 1
    decay_mult: 0
  }
  inner_product_param {
    num_output: 100 # num z's
    weight_filler {
      type: "gaussian"
	    std: 0.1
	  }
    bias_filler {
      type: "constant"
	    value: 0
	  }
  }
  include {
    phase: TRAIN
  }
}
layer{
  name: "sd"
  type: "Exp"
  bottom: "logsd"
  top: "sd"
  include {
    phase: TRAIN
  }
}
layer{
  name: "var"
  type: "Eltwise"
  bottom: "sd"
  bottom: "sd"
  top: "var"
  eltwise_param{
    operation: PROD
  }
  include {
    phase: TRAIN
  }
}
layer{
  name: "meansq"
  type: "Eltwise"
  bottom: "mu"
  bottom: "mu"
  top: "meansq"
  eltwise_param{
    operation: PROD
  }
  include {
    phase: TRAIN
  }
}
layer{
  name: "kldiv_plus_half"
  type: "Eltwise"
  bottom: "meansq"
  bottom: "var"
  bottom: "logsd"
  top: "kldiv_plus_half"
  eltwise_param{
    operation: SUM
    coeff: 0.5
    coeff: 0.5
    coeff: -1.0
  }
  include {
    phase: TRAIN
  }
}
layer {
  name: "kldiv"
  type: "Power"
  bottom: "kldiv_plus_half"
  top: "kldiv"
  power_param{
    shift: -0.5
  }
  include {
    phase: TRAIN
  }
}
layer{
  name: "klloss"
  type: "Reduction"
  bottom: "kldiv"
  top: "klloss"
  include {
    phase: TRAIN
  }
  #loss_weight: 0.0
  loss_weight: 0.01
  # SigmoidCrossEntropyLoss
  # normalizes by batch_size but
  # Reduction does not.
}
layer{
  name: "mu_dummy" # can't call this 'mu' or
  # caffe will try to copy
  # mu's parameters into
  # this layer at test time
  type: "DummyData"
  top: "mu"
  dummy_data_param{
    shape {
    	  dim: 1
    	  dim: 1
	  dim: 1 # test-time batch_size
	  dim: 100 # num z's
	  }
    data_filler{
      type: "constant"
	    value: 0
	  }
  }
  include {
    phase: TEST
  }
}
layer{
  name: "sd"
  type: "DummyData"
  top: "sd"
  dummy_data_param{
    shape {
    	  dim: 1    
    	  dim: 1    
          dim: 1 # test-time batch_size
	  dim: 100 # num z's
	  }
    data_filler{
         type: "constant"
	 value: 1
	  }
  }
  include {
    phase: TEST
  }
}
layer{
  name: "noise"
  type: "DummyData"
  top: "noise"
  dummy_data_param{
    shape { dim: 10 dim:  1  dim: 1  dim:  100 } #(.,.,batch_size,# z values)
    data_filler{
      type: "gaussian"
	    std: 1.
    }
  }
}

layer {
  name: "sd_reshape"
  type: "Reshape"
  bottom: "sd"
  top: "sd_reshape"  
  reshape_param {
     shape { dim: -1 dim:  1  dim: 1  dim:  100 }
  }
}
layer {
  name: "mu_reshape"
  type: "Reshape"
  bottom: "mu"
  top: "mu_reshape"  
  reshape_param {
     shape { dim: -1 dim:  1  dim: 1  dim:  100 }
  }
}
layer{
  name: "sdnoise"
  type: "Eltwise"
  bottom: "noise"
  bottom: "sd_reshape"
  top: "sdnoise"
  eltwise_param{
    operation: PROD
  }
}
layer{
  name: "sample"
  type: "Eltwise"
  bottom: "mu_reshape"
  bottom: "sdnoise"
  top: "sample"
  eltwise_param{
    operation: SUM
  }
}

# end VAE z's definition, begin decoder

layer {
  name: "decode4"
  type: "Convolution"
  bottom: "sample"
  top: "decode4"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 1
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "gaussian"
      	    std: 0.1
	  }
  }
}
layer {
  name: "decode4neuron"
  type: "ReLU"
  bottom: "decode4"
  top: "decode4neuron"
}
layer {
  name: "decode3"
  type: "Convolution"
  bottom: "decode4neuron"
  top: "decode3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 1
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "gaussian"
      	    std: 0.1
	  }
  }
}
layer {
  name: "decode3neuron"
  type: "ReLU"
  bottom: "decode3"
  top: "decode3neuron"
}
layer {
  name: "decode2"
  type: "Convolution"
  bottom: "decode3neuron"
  top: "decode2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 1
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "gaussian"
      	    std: 0.1
	  }
  }
}
layer {
  name: "decode2neuron"
  type: "ReLU"
  bottom: "decode2"
  top: "decode2neuron"
}
layer {
  name: "decode1_"
  type: "InnerProduct"
  bottom: "decode2neuron"
  top: "decode1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 1
    decay_mult: 0
  }
  inner_product_param {
    num_output: 3072
    weight_filler {
      type: "gaussian"
	    std: 0.1
	    sparse: 15
	  }
    bias_filler {
      type: "constant"
	    value: 0
	  }
  }
}
# layer {
#   name: "generated_images_reshape"
#   type: "Reshape"
#   bottom: "decode1"
#   top: "generated_images_reshape"
#   reshape_param {
#      shape { dim: 1 dim:  1024 }
#   }
# }
layer {
  name: "generated_images"
  type: "Sigmoid"
  bottom: "decode1"
  #  bottom: "generated_images_reshape"
  top: "generated_images"
}
layer {
  name: "loss"
  type: "EuclideanLoss"
  bottom: "generated_images"
  bottom: "flatdata"
  top: "cross_entropy_loss"
  loss_weight: .1
  loss_param {
    normalization: BATCH_SIZE
  }
  include {
    phase: TRAIN
  }
}

layer {
  name: "loss"
  type: "Silence"
  bottom: "generated_images"
  bottom: "norm_flatdata"
  include {
    phase: TRAIN
  }
}
layer {
  name: "silence_info"
  type: "Silence"
  bottom: "labels"
  # bottom: "im_info"
  include {
    phase: TRAIN
  }
}
layer {
  name: "kllos_brkdown"
  type: "Concat"
  #bottom: "meansq"
   bottom: "sd"
  #bottom: "logsd"
  top: "kll_brk"
  include {
    phase: TEST
  }
}

